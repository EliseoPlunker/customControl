{"version":3,"sources":["ng://custom-lib/lib/custom-lib.service.ts","ng://custom-lib/lib/custom-lib.component.ts","ng://custom-lib/lib/check-box-group.component.ts","ng://custom-lib/lib/custom-lib.module.ts"],"names":["CustomLibService","Injectable","args","providedIn","CustomLibComponent","prototype","ngOnInit","Component","selector","template","CheckBoxGroupComponent","el","this","_selectedItems","_name","_isString","_isFocused","_isRequired","name","nativeElement","getAttribute","Object","defineProperty","value","_cols","split","_key","_col","writeValue","propsToBoolean","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","setValue","index","booleanToProps","join","focusOut","validate","control","find","x","error","props","_this","propsString","map","source","indexOf","propsBoolean","forEach","item","push","host","[class]","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","ElementRef","Input","CustomLibModule","NgModule","declarations","imports","FormsModule","ReactiveFormsModule","BrowserModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomLibService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-custom-lib',\n  template: `\n    <p>\n      custom-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class CustomLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, Input, forwardRef,ElementRef } from '@angular/core';\r\nimport { ControlValueAccessor,  AbstractControl, ValidationErrors,NG_VALUE_ACCESSOR,NG_VALIDATORS } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'check-box-group',\r\n  template: `\r\n      <ng-container *ngFor=\"let item of source;let i=index;let last=last\">\r\n      <label *ngIf=\"customClass\" class=\"container\" [ngClass]=\"last?'last':''\">\r\n                <input id=\"{{_name+''+i}}\"\r\n             type=\"checkBox\" [ngModel]=\"_selectedItems[i]\"\r\n             (ngModelChange)=\"setValue($event,i)\" (focus)=\"_isFocused[i]=true\"(blur)=\"_isFocused[i]=false;onTouched()\">\r\n{{item[_col]}}\r\n          <span class=\"checkmark\" [ngClass]=\"_isFocused[i]?'focused':''\"></span>\r\n      </label>\r\n      <div  *ngIf=\"!customClass\" [ngClass]=\"last?'form-group':''\" class=\"form-check\" >\r\n         <input type=\"checkbox\" class=\"form-check-input\"  id=\"{{_name+''+i}}\"\r\n              [ngModel]=\"_selectedItems[i]\"\r\n             (ngModelChange)=\"setValue($event,i)\" (blur)=\"onTouched()\" >\r\n         <label class=\"form-check-label\" for=\"{{_name+''+i}}\">{{item[_col]}}</label>\r\n      </div>\r\n\r\n      </ng-container>\r\n  `,\r\n  host: {'[class]': '(customClass ? \" \" + customClass : \"\")', },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => CheckBoxGroupComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => CheckBoxGroupComponent),\r\n      multi: true,\r\n    }\r\n\r\n  ],\r\n  styles:[`\r\n    .focused {\r\n       outline: black dotted thin;\r\n    }`\r\n  ]\r\n})\r\nexport class CheckBoxGroupComponent implements ControlValueAccessor {\r\n\r\n  @Input() source;\r\n  @Input()\r\n  set cols(value:string){\r\n    let _cols=value.split(',')\r\n    this._key = _cols[0];\r\n    this._col = _cols[1]\r\n  }\r\n  @Input()customClass\r\n  _selectedItems: any[] = [];\r\n  _key: string;\r\n  _col: string;\r\n  _name:string=\"\";\r\n  _isString:boolean=false;\r\n  _isFocused:boolean[]=[];\r\n  _isRequired:boolean=false;\r\n  onChange;\r\n  onTouched;\r\n\r\n  constructor(el:ElementRef) { \r\n    let name=el.nativeElement.getAttribute('name');\r\n    this._isRequired=el.nativeElement.getAttribute('isRequired')!=null?true:false;\r\n    this._isString=el.nativeElement.getAttribute('isString')!=null?true:false;\r\n    this._name=name?name:\"ck\";\r\n    \r\n    }\r\n  writeValue(value: any[]|any): void {\r\n    this._selectedItems = this._isString?\r\n       this.propsToBoolean(value?value.split(','):\"\"):this.propsToBoolean(value);\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n  setValue(value: boolean, index: number) {\r\n    this._selectedItems[index] = value;\r\n    this.onChange(this._isString?this.booleanToProps(this._selectedItems).join(','):this.booleanToProps(this._selectedItems));\r\n\r\n  }\r\n  focusOut()\r\n  {\r\n    this.onTouched()\r\n  }\r\n  validate(control: AbstractControl): ValidationErrors | null{\r\n    if (!this._isRequired)\r\n      return null;\r\n    if (!this._selectedItems.find(x=>x))\r\n      return {error:\"you must select one option at last\"}\r\n\r\n    return null\r\n  }\r\n\r\n  propsToBoolean(props): any[] {\r\n    let propsString=props?props.map(x=>''+x):null;\r\n    return props ? this.source.map((x: any) => propsString.indexOf(''+x[this._key]) >= 0)\r\n      : this.source.map(x => false);\r\n\r\n  }\r\n  booleanToProps(propsBoolean: boolean[]) {\r\n    let props: any[] = [];\r\n    if (propsBoolean) {\r\n      propsBoolean.forEach((item, index) => {\r\n        if (item)\r\n          props.push(this.source[index][this._key])\r\n      })\r\n    }\r\n    return props;\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n\nimport { CustomLibComponent } from './custom-lib.component';\nimport { CheckBoxGroupComponent } from './check-box-group.component';\n\n@NgModule({\n  declarations: [CustomLibComponent,CheckBoxGroupComponent],\n  imports: [ FormsModule,ReactiveFormsModule,BrowserModule\n  ],\n  exports: [CustomLibComponent,CheckBoxGroupComponent]\n})\nexport class CustomLibModule { }\n"]}